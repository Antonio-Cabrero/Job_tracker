{"version":3,"sources":["styles/form.module.css","styles/menuBar.module.css","styles/navMenu.module.css","styles/jobCard.module.css","styles/jobCards.module.css","styles/buttons.module.css","components/AddBtn.js","components/JobCard.js","components/JobCards.js","JobsData.js","components/NewJobContainer.js","components/NoContent.js","components/MenuBar.js","components/NavMenu.js","components/EditJobCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddBtn","props","className","css","AddBtn_wrap","onClick","handleClick","AddBtn_svg","width","height","viewBox","fill","xmlns","x","y","transform","JobCard","item","JobCard_title","position","JobCard_subTitle","company","JobCard_info","jobBoard","dateApplied","JobCard_status","hasFollowedUp","hadInterview","JobCards","jobCards","data","map","index","key","JobCards_Wrap","addBtn","jobApplications","NewJobCard","useState","setPosition","setCompany","today","Date","day","getDate","month","getMonth","year","getFullYear","printDate","date","setJobBoard","handleChange","e","target","name","value","Content_wrap","FormTitle","onSubmit","handleSubmit","onChange","FormInput_text","type","placeholder","BtnWrap","jobsData","push","FormBtn","cancelBtn","FormBtn_Cancel","NoContent","NoTracking","MenuBar","toggleClass","toggleIcon","MenuBtn_open","MenuBtn","menuBtn","MenuBar_line","MenuTitle","NavMenu","display","toggleDisplay","NavMenu_container_open","NavMenu_container","NavMenu_item","EditJobCard","setDate","followUp","setFollowUp","setHadInterview","checked","htmlFor","id","FormInput_checkbox","deleteBtn","FormBtn_delete","App","jobData","length","hasData","setHasData","showJobForm","setShowJobForm","editJobForm","setEditJobForm","editCard","setEditCard","setIndex","displayMenu","setDisplayMenu","onAdd","count","onCancel","view","pop","card","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6ebe50f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content_wrap\":\"form_Content_wrap__3sXsC\",\"FormTitle\":\"form_FormTitle__1WqEU\",\"FormInput_text\":\"form_FormInput_text__uSu2c\",\"FormInput_checkbox\":\"form_FormInput_checkbox__3xiVJ\",\"BtnWrap\":\"form_BtnWrap__3QoBX\",\"FormBtn\":\"form_FormBtn__1D4Z-\",\"FormBtn_Cancel\":\"form_FormBtn_Cancel__2FAGc\",\"FormBtn_delete\":\"form_FormBtn_delete__2qsNy\",\"JobCard\":\"form_JobCard__2r6ss\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuBar\":\"menuBar_MenuBar__3xS2r\",\"MenuBtn\":\"menuBar_MenuBtn__kt93T\",\"MenuBtn_open\":\"menuBar_MenuBtn_open__3VX__\",\"MenuTitle\":\"menuBar_MenuTitle__Qiz0s\",\"MenuBar_line\":\"menuBar_MenuBar_line__333yD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavMenu_container\":\"navMenu_NavMenu_container__3B8h8\",\"NavMenu_container_open\":\"navMenu_NavMenu_container_open__2x3lX\",\"NavMenu\":\"navMenu_NavMenu__3Y0Nf\",\"NavMenu_item\":\"navMenu_NavMenu_item__2JXqd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JobCard\":\"jobCard_JobCard__3cKd6\",\"JobCard_title\":\"jobCard_JobCard_title__15JaV\",\"JobCard_subTitle\":\"jobCard_JobCard_subTitle__3QGiA\",\"JobCard_info\":\"jobCard_JobCard_info__1Bm6n\",\"JobCard_status\":\"jobCard_JobCard_status__2YzYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JobCards_Wrap\":\"jobCards_JobCards_Wrap__1oPnv\",\"NoTracking\":\"jobCards_NoTracking__2zg2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddBtn\":\"buttons_AddBtn__3UrbG\",\"AddBtn_wrap\":\"buttons_AddBtn_wrap__3-TTg\",\"AddBtn_svg\":\"buttons_AddBtn_svg__2iGxi\"};","import React from 'react';\r\nimport css from \"../styles/buttons.module.css\"\r\n\r\nfunction AddBtn(props) {\r\n\r\n        return (\r\n            <div className={css.AddBtn_wrap}>\r\n                <button className={css.AddBtn} onClick={props.handleClick}>\r\n                    <svg className={css.AddBtn_svg} width=\"64\" height=\"64\" viewBox=\"0 0 62 62\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <rect x=\"30\" y=\"14\" width=\"2.2\" height=\"32.2\" />\r\n                        <rect x=\"46\" y=\"2\" width=\"2.2\" height=\"32.2\" transform=\"rotate(90 33.1 15.9)\"/>\r\n                    </svg>\r\n                </button>   \r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\n\r\nexport default AddBtn;","import React from 'react';\r\nimport css from '../styles/jobCard.module.css'\r\n\r\nfunction JobCard(props) {\r\n    return (\r\n        <div onClick={() =>props.handleClick(props.item)} className={css.JobCard}>\r\n            <h4 className={css.JobCard_title}>{props.position}</h4>\r\n            <span className={css.JobCard_subTitle}>{props.company}</span>\r\n            <div className={css.JobCard_info}>\r\n                <span>{props.jobBoard}</span>\r\n                <span>{props.dateApplied}</span>\r\n            </div>\r\n            <div className={css.JobCard_status}>\r\n               <div>\r\n                <h5>Followed up:</h5> \r\n                <span>{props.hasFollowedUp === true? \"Yes\" : \"No\"}</span>  \r\n               </div>\r\n               <div>\r\n                <h5>Interviewd:</h5> \r\n                <span>{props.hadInterview === true? \"Yes\" : \"No\"}</span>\r\n               </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JobCard;","import React from 'react';\r\nimport css from '../styles/jobCards.module.css'\r\nimport AddBtn from './AddBtn'\r\nimport JobCard from './JobCard';\r\n\r\nfunction JobCards(props)  {\r\n \r\n    const jobCards = props.data.map((item, index) =>\r\n            <JobCard \r\n                key={index}\r\n                item={index}\r\n                position={item.position}\r\n                company={item.company}\r\n                dateApplied={item.dateApplied}\r\n                jobBoard={item.jobBoard}\r\n                hasFollowedUp={item.hasFollowedUp}\r\n                hadInterview={item.hadInterview}\r\n                handleClick={props.handleClick}\r\n            />)\r\n\r\n      return (\r\n        <div className={css.JobCards_Wrap}>\r\n          {jobCards}\r\n          <AddBtn handleClick={props.addBtn}/>\r\n        </div>\r\n      )\r\n  }\r\n\r\n\r\nexport default JobCards;","const jobApplications = [\r\n    {\r\n        position: \"Software Developer\",\r\n        company: \"Google\",\r\n        dateApplied: \"12/11/19\",\r\n        jobBoard: \"LinkedIn\",\r\n        hasFollowedUp: false,\r\n        hadInterview: false\r\n    },\r\n    {\r\n        position: \"Web Developer\",\r\n        company: \"Uber\",\r\n        dateApplied: \"08/11/19\",\r\n        jobBoard: \"LinkedIn\",\r\n        hasFollowedUp: false,\r\n        hadInterview: false\r\n    },\r\n    {\r\n        position: \"Fullstack Developer\",\r\n        company: \"Airbnb\",\r\n        dateApplied: \"01/11/19\",\r\n        jobBoard: \"Company website\",\r\n        hasFollowedUp: true,\r\n        hadInterview: false\r\n    },\r\n    {\r\n        position: \"Front End Developer\",\r\n        company: \"Microsoft\",\r\n        dateApplied: \"12/10/19\",\r\n        jobBoard: \"LinkedIn\",\r\n        hasFollowedUp: false,\r\n        hadInterview: true\r\n    },\r\n    {\r\n        position: \"Back End Developer\",\r\n        company: \"Arkaia\",\r\n        dateApplied: \"04/11/19\",\r\n        jobBoard: \"Facebook\",\r\n        hasFollowedUp: true,\r\n        hadInterview: true\r\n    },\r\n    {\r\n        position: \"Front End Developer\",\r\n        company: \"Blizzard.Inc\",\r\n        dateApplied: \"03/11/19\",\r\n        jobBoard: \"Monster\",\r\n        hasFollowedUp: true,\r\n        hadInterview: false\r\n    },\r\n    {\r\n        position: \"UX Developer\",\r\n        company: \"Facebook\",\r\n        dateApplied: \"15/10/19\",\r\n        jobBoard: \"Indeed\",\r\n        hasFollowedUp: true,\r\n        hadInterview: false\r\n    },\r\n    \r\n]\r\n\r\nexport default jobApplications","import React, { useState } from 'react'\r\nimport jobsData from '../JobsData'\r\nimport css from '../styles/form.module.css'\r\n\r\n\r\nfunction NewJobCard(props) {\r\n\r\n    const [position, setPosition] = useState('')\r\n    const [company, setCompany] = useState('')\r\n    const [date] = useState(printDate())\r\n    const [jobBoard, setJobBoard] = useState('')\r\n    \r\n    function handleChange(e) {\r\n        switch(e.target.name) {\r\n            case 'position': return setPosition(e.target.value)\r\n            case 'company': return setCompany(e.target.value)\r\n            case 'jobBoard': return setJobBoard(e.target.value)\r\n            default: return \r\n        }\r\n    }\r\n\r\n    function handleSave(e) {\r\n        jobsData.push({\r\n            position: position,\r\n            company: company,\r\n            dateApplied: date,\r\n            jobBoard: jobBoard,\r\n            hasFollowedUp: false,\r\n            hadInterview: false,\r\n        })\r\n    }\r\n\r\n    function printDate () {\r\n        let today = new Date()\r\n        let day = today.getDate()\r\n        let month = today.getMonth() + 1\r\n        let year = today.getFullYear()\r\n        const fullDate = day + \"/\" + month + \"/\" + year\r\n        return fullDate\r\n    }\r\n\r\n    \r\nreturn (\r\n        <div className={css.Content_wrap}>\r\n            <div className={css.JobCard}>\r\n                <h3 className={css.FormTitle}>New Tracking</h3>\r\n                <form onSubmit={props.handleSubmit}>\r\n                    <input \r\n                        name=\"position\"\r\n                        value={position}\r\n                        onChange={handleChange} \r\n                        className={css.FormInput_text} \r\n                        type=\"text\" \r\n                    placeholder=\"Job Position\"\r\n                    />\r\n                    <input \r\n                        name=\"company\"\r\n                        value={company}\r\n                        onChange={handleChange}\r\n                        className={css.FormInput_text} \r\n                        type=\"text\" \r\n                    placeholder=\"Company Name\"\r\n                    />\r\n\r\n                    <div className={css.BtnWrap}>\r\n                        <span>Date:</span>\r\n                        <span>{date}</span>\r\n                    </div>\r\n                    \r\n                    <span>Optional</span>\r\n\r\n                    <input \r\n                        name=\"jobBoard\"\r\n                        value={jobBoard}\r\n                        onChange={handleChange}\r\n                        className={css.FormInput_text} \r\n                        type=\"text\"\r\n                        placeholder=\"Job Board\"\r\n                        />\r\n                    <div className={css.BtnWrap}>\r\n                        <button onClick={handleSave} className={css.FormBtn}>Save</button>\r\n                        <button onClick={props.cancelBtn} className={css.FormBtn_Cancel}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        );\r\n    \r\n}\r\n\r\n\r\n\r\nexport default NewJobCard;","import React from 'react';\r\nimport css from '../styles/jobCards.module.css'\r\nimport AddBtn from './AddBtn';\r\n\r\nfunction NoContent(props) {\r\n    return (\r\n        <div className={css.NoTracking}>\r\n            <h3> You aren't tracking anythig yet!</h3>\r\n            <AddBtn handleClick={props.addBtn}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoContent;","import React from 'react';\r\nimport css from '../styles/menuBar.module.css'\r\n\r\nconst MenuBar = (props) => {\r\n\r\n    const toggleClass = props.toggleIcon? css.MenuBtn_open : css.MenuBtn\r\n    return (\r\n        <div className={css.MenuBar}>\r\n            <div onClick={props.menuBtn} className={toggleClass}>\r\n                <div className={css.MenuBar_line}></div>\r\n                <div className={css.MenuBar_line}></div>\r\n                <div className={css.MenuBar_line}></div>\r\n            </div>\r\n            <h1 className={css.MenuTitle}> JOBTracker </h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MenuBar;","import React, { useState } from 'react';\r\nimport css from '../styles/navMenu.module.css'\r\n\r\nfunction NavMenu(props) {\r\n\r\n    const display = props.toggleDisplay? css.NavMenu_container_open : css.NavMenu_container\r\n\r\n    return (\r\n        <div className={display} >\r\n            <div className={css.NavMenu}>\r\n                <div className={css.NavMenu_item}>About</div>\r\n                <div className={css.NavMenu_item}>Settings</div>\r\n                <div className={css.NavMenu_item}>Version</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavMenu;","import React, { useState } from 'react'\r\nimport css from '../styles/form.module.css'\r\n\r\nfunction EditJobCard(props) {\r\n\r\n    const [position, setPosition] = useState(props.data.position)\r\n    const [company, setCompany] = useState(props.data.company)\r\n    const [date, setDate] = useState(props.data.dateApplied)\r\n    const [jobBoard, setJobBoard] = useState(props.data.jobBoard)\r\n    const [followUp , setFollowUp] = useState(props.data.hasFollowedUp)\r\n    const [hadInterview, setHadInterview] = useState(props.data.hadInterview)\r\n    \r\n    function handleChange(e) {\r\n        switch(e.target.name) {\r\n            case 'position': return setPosition(e.target.value)\r\n            case 'company': return setCompany(e.target.value)\r\n            case 'jobBoard': return setJobBoard(e.target.value)\r\n            case 'date': return setDate(e.target.value)\r\n            case 'followUp': return setFollowUp(e.target.checked)\r\n            case 'interviewed': return setHadInterview(e.target.checked)\r\n            \r\n            default: return \r\n        }\r\n    }\r\n\r\n    function handleSave(e) {\r\n        props.data.position = position\r\n        props.data.company = company\r\n        props.data.dateApplied = date\r\n        props.data.jobBoard = jobBoard\r\n        props.data.hasFollowedUp = followUp\r\n        props.data.hadInterview = hadInterview\r\n    }\r\n\r\n        return (\r\n                <div className={css.Content_wrap}>\r\n                    <div className={css.JobCard}>\r\n                        <h3 className={css.FormTitle}>Edit Tracking</h3>\r\n                        <form onSubmit={props.handleSubmit}>\r\n                            <input \r\n                                name=\"position\"\r\n                                value={position}\r\n                                onChange={handleChange} \r\n                                className={css.FormInput_text} \r\n                                type=\"text\" \r\n                            placeholder=\"Job Position\"\r\n                            />\r\n                            <input \r\n                                name=\"company\"\r\n                                value={company}\r\n                                onChange={handleChange}\r\n                                className={css.FormInput_text} \r\n                                type=\"text\" \r\n                            placeholder=\"Company Name\"\r\n                            />\r\n\r\n                            <div className={css.BtnWrap}>\r\n                                <input \r\n                                    name=\"date\"\r\n                                    value={date}\r\n                                    onChange={handleChange}\r\n                                    className={css.FormInput_text} \r\n                                    type=\"text\" \r\n                                placeholder=\"Date Applied(DD/MM/YYYY)\"\r\n                                />\r\n                            </div>\r\n                            <div className={css.BtnWrap}>\r\n                                <label htmlFor=\"followUp\">Follow Up</label>\r\n                                <input \r\n                                    id=\"followUp\" \r\n                                    name=\"followUp\" \r\n                                    type=\"checkbox\" \r\n                                    checked={followUp}\r\n                                    onChange={handleChange}\r\n                                    className={css.FormInput_checkbox}\r\n                                />\r\n                                <label htmlFor=\"interviewed\">Interviewed</label>\r\n                                <input \r\n                                    id=\"interviewed\" \r\n                                    name=\"interviewed\" \r\n                                    type=\"checkbox\" \r\n                                    checked={hadInterview}\r\n                                    onChange={handleChange}\r\n                                    className={css.FormInput_checkbox}\r\n                                />\r\n                            </div>\r\n                            <input \r\n                                name=\"jobBoard\"\r\n                                value={jobBoard}\r\n                                onChange={handleChange}\r\n                                className={css.FormInput_text} \r\n                                type=\"text\"\r\n                                placeholder=\"Job Board\"\r\n                                />\r\n                            <div className={css.BtnWrap}>\r\n                                <button onClick={handleSave} className={css.FormBtn}>Save</button>\r\n                                <button type=\"button\" onClick={props.cancelBtn} className={css.FormBtn_Cancel}>Cancel</button>\r\n                            </div>\r\n                            <button onClick={props.deleteBtn} className={css.FormBtn_delete}>Delete</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n        );\r\n}\r\n\r\n\r\nEditJobCard.propTypes = {\r\n\r\n};\r\n\r\nexport default EditJobCard;","import React, { useState } from 'react'\r\nimport JobCards from './components/JobCards'\r\nimport NewJobCard from './components/NewJobContainer'\r\nimport Message from './components/NoContent'\r\nimport jobData from './JobsData'\r\nimport MenuBar from './components/MenuBar'\r\nimport NavMenu from './components/NavMenu'\r\nimport EditJobCard from './components/EditJobCard'\r\n\r\n\r\nfunction App(props) {\r\n\r\n  const [hasData, setHasData] = useState(jobData.length)\r\n  const [showJobForm, setShowJobForm] = useState(false) \r\n  const [editJobForm, setEditJobForm] = useState(true)\r\n  const [editCard, setEditCard] = useState('')\r\n  const [index, setIndex] = useState('')\r\n  const [displayMenu, setDisplayMenu] = useState(false)\r\n\r\n  const onAdd = (count) => {\r\n      setHasData(count)\r\n      setShowJobForm(true)\r\n  }\r\n\r\n  const onCancel = () => showJobForm? setShowJobForm(false)\r\n        : editJobForm? setEditJobForm(false) : null\r\n\r\n\r\n  const onEdit = (card) => {\r\n    setIndex(card)\r\n    setEditCard(jobData[card])\r\n    setEditJobForm(true)\r\n  }\r\n\r\n  const onDelete = () => {\r\n    jobData.pop(index)\r\n    setHasData(jobData.length)\r\n  }\r\n\r\n  const onSubmit = () => showJobForm? setShowJobForm(false) \r\n    : editJobForm\r\n        ? setEditJobForm(false) : null\r\n\r\n  const onMenuDisplay = () => displayMenu? setDisplayMenu(false) : setDisplayMenu(true)\r\n\r\n  const view = editJobForm? <EditJobCard \r\n                                data={editCard} \r\n                                index={index} \r\n                                handleSubmit={onSubmit} \r\n                                cancelBtn={onCancel} \r\n                                deleteBtn={onDelete}\r\n                            />\r\n  : showJobForm\r\n      ? <NewJobCard handleSubmit={onSubmit} cancelBtn={onCancel} />\r\n      : hasData\r\n          ? <JobCards data={jobData} addBtn={onAdd} handleClick={onEdit}/>\r\n          : <Message addBtn={onAdd} />\r\n\r\n  return (\r\n      <div>\r\n          <MenuBar menuBtn={onMenuDisplay} toggleIcon={displayMenu}/>\r\n          <NavMenu toggleDisplay={displayMenu}/>\r\n          {view}\r\n      </div>\r\n  );\r\n     \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}